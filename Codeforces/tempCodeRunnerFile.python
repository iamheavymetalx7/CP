from collections import defaultdict
def maximumLength(nums,k):

    n = len(nums)

    # print(n)
    dp = [[[-1]*(505) for _ in range(30)] for _ in range(505)]
    def recur(idx,cnt,pidx):
        
        if idx>=n or cnt>k:
            if cnt>k:
                return -1
            return 0
        
        if dp[idx][cnt][pidx]!=-1:
            return dp[idx][cnt][pidx]
        
        take =0

        if pidx!=-1 and nums[idx]!=nums[pidx]:
            take += 1+recur(idx+1,cnt+1,idx)
        else:
            take +=1 + recur(idx+1,cnt,idx)
            
        nottake =0
        

        nottake += recur(idx+1,cnt,pidx)
        
        dp[idx][cnt][pidx] = max(take,nottake)
        return dp[idx][cnt][pidx]
    ans = recur(0,0,-1)
    return (ans)

print(maximumLength([2,10,1,7,3,4,2,7,10,9,3,6,7,5,9,3,3,10,10,2,6,10,4,3,4,4,7,10,1,7,10,6,10,3,7,10,3,7,7,10,6,4,4,9,9,8,6,2,4,6,6,9,3,7,6,6,5,3,8,6,3,5,4,5,3,1,4,10,1,10,1,1,4,5,8,6,8,2,5,1,9,8,5,1,4,3,5,4,10,10,8,4,9,2,3,7,6,3,7,3,8,1,9,3,3,10,4,8,1,8,10,4,7,2,8,8,1,9,4,5,8,7,7,1,8,1,1,9,9,10,4,7,8,1,10,8,10,7,1,5,1,5,7,7,1,3,7,1,4,4,1,1,7,2,7,2,2,1,4,7,3,6,7,8,10,2,8,2,10,10,2,2,9,9,5,1,7,3,6,9,6,5,4,1,10,7,1,6,9,10,8,6,4,10,4,10,10,1,2,4,5,5,7,2,6,7,10,10,4,9,1,6,7,9,8,1,6,3,4,7,2,7,1,2,10,10,3,6,2,8,9,3,5,9,5,5,3,10,9,6,6,7,6,6,6,3,8,7,6,2,4,10,7,7,9,7,7,9,1,3,9,4,7,8,10,7,9,2,2,1,7,3,5,10,2,5,5,10,7,7,7,7,10,6,9,9,3,1,2,9,1,4,8,4,5,6,5,1,1,6,9,1,4,5,2,3,9,1,7,4,2,6,8,6,8,6,6,9,10,4,3,4,1,10,8,9,8,2,9,1,9,9,4,7,3,4,2,9,9,10,10,1,5,6,5,5,7,9,1,9,3,10,6,5,10,1,8,10,6,10,5,6,5,3,9,3,8,6,10,9,3,7,2,1,10,4,1,8,4,10,5,8,5,9,10,5,1,10,7,1,9,9,8,4,8,7,10,6,2,8,4,6,10,3,6,5,3,5,2,7,5,1,2,6,6,2,8,10,10,9,6,5,4,1,7,5,4,3,7,9,9,8,1,4,1,9,9,10,7,7,6,10,8,8,3,2,7,2,2,1,5,10,6,3,5,6,8,2,8,9,2,4,2,4,5,8,10,5,7,4,4,8,6,7,8,5,1,8,2,4,2,5,5,3,7,5,3,6,6,2,4,10,1,6,4,10,9,1,1,3],13))